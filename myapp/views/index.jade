doctype html
html
    head
        title= title
        link(rel='stylesheet', href='/stylesheets/style.css')

        script(src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js")
        link(rel="stylesheet" href="/javascripts/jquery_ui/jquery-ui.css")
  
        script(src="/javascripts/jquery_ui/jquery-ui.js")
        //- script(src="/javascript/ui/1.11.4/jquery-ui.js")
        style
            #webcam_image { width: 150px; height: 150px; padding: 0.5em; }
            .ui-resizable-ghost { border: 1px dotted gray; }
            .ui-resizable-helper { border: 2px dotted #00F; }

        script(type = "text/javascript").
            var default_device_num = 0
            var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });

            var timeout_res = null
            var zero_speed_offset = 94
            var ffmpeg_rate = 10

            $(function() {
                $( "#webcam_image" ).resizable( { ghost: true
                 //- helper: "ui-resizable-helper"
                 });
            });

            function stopTimer() {
                console.log("stopping timer");
                clearTimeout(timeout_res);
                timeout_res = null
                $("#start_img_button").attr("disabled", false);
                $("#stop_img_button").attr("disabled", true);
            }

            function startTimer() {
                if (timeout_res)
                {
                    console.log("Starting get image timer when they are already started")
                }
                else
                {
                    console.log("starting timer");
                    timeout_res = setTimeout(getNewImage, 500);
                    $("#start_img_button").attr("disabled", true);
                    $("#stop_img_button").attr("disabled", false);
                }
            }

            var imageTimerOk = true
            var statusTimerOk = true
            var currentStatusImage = "/images/none.jpg"
            function setStatusImage(){
                if (imageTimerOk && statusTimerOk && (timeout_res == null))
                {
                    if ( currentStatusImage != "/images/yellow.jpg")
                    {
                        currentStatusImage = "/images/yellow.jpg"
                        $("#status_img").attr('src',currentStatusImage);

                        console.log("Changing status image to: "+currentStatusImage);
                    }
                }
                else if (imageTimerOk && statusTimerOk)
                {
                    if ( currentStatusImage != "/images/green.jpg")
                    {
                        currentStatusImage = "/images/green.jpg"
                        $("#status_img").attr('src',currentStatusImage);

                        console.log("Changing status image to: "+currentStatusImage);
                    }
                }
                else
                {
                    if ( currentStatusImage != "/images/red.jpg")
                    {
                        currentStatusImage = "/images/red.jpg"
                        $("#status_img").attr('src',currentStatusImage);

                        console.log("Changing status image to: "+currentStatusImage);
                    }
                }
                console.log("update status image called: image timer ok: " + imageTimerOk + " status timer ok: " +statusTimerOk + " get new image timer active: "+(timeout_res != null));
            }

            var imageErrorTimer = null
            function restartImageErrorTimer(){
                if (imageErrorTimer != null)
                {
                    clearTimeout(imageErrorTimer);
                    imageErrorTimer = null
                }
                imageErrorTimer = setTimeout( function(){
                    console.log("Error: haven't received image within timeout deadline");
                    imageTimerOk = false
                    setStatusImage();
                }, 500);
                imageTimerOk = true
                setStatusImage();
            }

            var statusErrorTimer = null
            function restartStatusErrorTimer(){
                if (statusErrorTimer != null)
                {
                    clearTimeout(statusErrorTimer);
                    statusErrorTimer = null
                }
                statusErrorTimer = setTimeout( function(){
                    console.log("Error: haven't received a 'current status' response within timeout deadline");
                    statusTimerOk = false
                    setStatusImage();
                }, 2000);
                statusTimerOk = true
                setStatusImage();
            }


            function getCurentStatus(){
                restartStatusErrorTimer();
                console.log("get current state called");
                $.post("/",{ get_status: true, uuid: uuid }, function(data, status){
                    console.log("Got response with current state")
                    if (status != "success")
                    {
                        console.log("Error: Data: " + JSON.stringify(data) + " status: "+status);
                    }
                    else
                    {
                        console.log(JSON.stringify(data))
                        console.log(data.pos)
                        if (data.ffmpeg_running == null)
                        {
                            //- do nothing for now. something weird happened
                            console.log("ffmpeg is null");
                        }
                        else if (data.ffmpeg_running)
                        {
                            console.log("Already streaming. start callbacks");
                            startTimer();
                        }
                        else if(timeout_res != null)
                        {
                            console.log("FFMPEG not streaming. stop timers");
                            stopTimer();
                        }

                        if (data.pos == null)
                        {
                            console.log("data.pos = null");
                        }
                        else {
                            console.log("Got current position: "+data.pos);
                            $('#speed_slider').val( Number(data.pos) - Number(zero_speed_offset) );
                            $('#speed_value_textbox').val($('#speed_slider').val());
                        }

                        if (data.distance == null)
                        {
                            console.log("data.distance = null");
                        }
                        else {
                            console.log("Got current distance: "+data.distance);
                            $('#current_distance_text').html( Math.round(data.distance * 100) / 100 );
                        }

                        if (data.num_users_connected == null)
                        {
                            console.log("data.num_users_connected = null");
                        }
                        else {
                            console.log("Got current num_users_connected: "+data.num_users_connected);
                            $('#num_connected_text').html( data.num_users_connected );
                        }

                        if (data.device_num == null)
                        {
                            console.log("data.device_num = null");
                        }
                        else
                        {
                            console.log("Got dev number: "+data.device_num);
                            $("#current_device_num").html(data.device_num);
                        }
                        restartStatusErrorTimer();
                        setTimeout(getCurentStatus, 1000);
                    }
                });
            }

            function updateSpeed()
            {
                var speed = $('#speed_value_textbox').val();
                console.log("updating servo speed to: "+speed);
                $.post("/",{ servo_pos: Number(speed) + Number(zero_speed_offset) }, function(data, status){
                    if (status != "success")
                    {
                        console.log("Error: Data: " + JSON.stringify(data) + " status: "+status);
                    }
                });
            }
            
            function getNewImage()
            {
                $.post("/",{ get_new_img: true }, function(data, status){
                    if (status != "success")
                    {
                        console.log("Error: Data: " + JSON.stringify(data) + " status: "+status);
                        timeout_res = null
                    }
                    else if (data.status == "success")
                    {
                        $("#webcam_image").attr("src", "data:image/jpeg;base64," + data.data);
                        timeout_res = setTimeout(getNewImage, 100);
                        restartImageErrorTimer();
                    }
                    else
                    {
                        sendStopFFMPEG()
                        console.log("error while getting image: error = "+data.data)
                    }
                });
            }

            function sendStartFFMPEG(dev){
                restartImageErrorTimer();
                stopTimer();
                console.log("send ffmpeg start");
                setTimeout(function() {
                    $.post("/",{ start_ffmpeg: true, device: dev }, function(data, status){
                        if (status != "success")
                        {
                            console.log("Error: Data: " + JSON.stringify(data) + " status: "+status);
                        }
                        else
                        {
                            startTimer()
                        }
                    });
                }, 500);
            }

            function sendStopFFMPEG(){
                console.log("send ffmpeg stop");
                if (imageErrorTimer != null)
                {
                    clearTimeout(imageErrorTimer);
                    imageErrorTimer = null
                }
                stopTimer()
                setTimeout( function(){
                    $.post("/",{ stop_ffmpeg: true }, function(data, status){
                        if (status != "success")
                        {
                            console.log("Error: Data: " + JSON.stringify(data) + " status: "+status);
                        }
                    });
                }, 500)
            }

            //- $(document).on('click', '#but', function(){
            //-     updateSpeed()
            //- });
            $(document).on('input', '#speed_slider', function(){
                $('#speed_value_textbox').val($('#speed_slider').val());
                updateSpeed()
            });

            $(document).on('click', '#stop_button', function(){
                $('#speed_value_textbox').val(0);
                //- $('#speed_slider').val(0);
                updateSpeed()
            });

            $(document).on('input', '#speed_value_textbox', function(){
                $('#speed_slider').val($('#speed_value_textbox').val());
                updateSpeed()
            });

            $(document).on('click', '#start_img_button', function(){
                if (timeout_res == null)
                {
                    var dev_num_val = $("#device_num").val();
                    if (!dev_num_val)
                    {
                        sendStartFFMPEG(default_device_num, ffmpeg_rate);
                    }
                    else
                    {
                        sendStartFFMPEG(dev_num_val, ffmpeg_rate);
                        console.log("starting: dev id = "+dev_num_val);
                    }
                    restartImageErrorTimer();
                }
                else
                {
                    console.log("please stop streaming before starting again");
                }
            });

            $(document).on('click', '#stop_img_button', function(){
                console.log("stop button clicked");
                if (timeout_res != null)
                {
                    sendStopFFMPEG();
                }
            });

            $(document).ready( function(){
                $("#start_img_button").attr("disabled", false);
                $("#stop_img_button").attr("disabled", true);
                $("#device_num").val(default_device_num);
                $("#current_device_num").html(default_device_num);
                getCurentStatus();
            })


    body
        h1.
            Feed Paisley

        table
            tr
                td
                    p.
                        Control slider
                    input(id="speed_slider" type="range" min="-90" max="90" step="1" )
                    p.
                        Value
                    button(id="stop_button").
                        Stop Motor
                    input(id="speed_value_textbox" type="number")
                    br.
                    br.
                    p
                        | Current distance: 
                        span(id="current_distance_text")
                    p
                        | Number of users connected: 
                        span(id="num_connected_text")
                    p
                        | Current/Last video device number: 
                        span(id="current_device_num")
                    p
                        | New video device number (0 or 1): 
                        input(id="device_num" type="number").
                    br.
                    button(id="start_img_button").
                        Start streaming images
                    button(id="stop_img_button").
                        Stop streaming images
                    br.
                td
                    //- div(id="resizable" class="ui-widget-content")
                    image(id="webcam_image" class="ui-widget-content" width="320" height="240")
        p.
            Status Face: green = all good. yellow = not receiving images, but not expecting to either. red = not recieving images or status message
        image(id="status_img" width="160px" height="160px" src="/images/red.jpg")
